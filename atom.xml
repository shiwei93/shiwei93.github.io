<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://shiwei93.github.io</id>
    <title>二十七</title>
    <updated>2020-02-15T05:55:13.637Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://shiwei93.github.io"/>
    <link rel="self" href="https://shiwei93.github.io/atom.xml"/>
    <subtitle>浪花有意千重雪，桃李无言一队春</subtitle>
    <logo>https://shiwei93.github.io/images/avatar.png</logo>
    <icon>https://shiwei93.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 二十七</rights>
    <entry>
        <title type="html"><![CDATA[理解 RunLoop]]></title>
        <id>https://shiwei93.github.io/rGMrTwpM3</id>
        <link href="https://shiwei93.github.io/rGMrTwpM3">
        </link>
        <updated>2020-01-20T02:13:39.000Z</updated>
        <content type="html"><![CDATA[<h1 id="理解-runloop">理解 RunLoop</h1>
<p>前几天和同事讨论问题，讨论到 RunLoop 时，发现这个基础概念已经快忘光了，这两天趁着需求完结的空档，整理重温一下。下面的源码来源于 <a href="https://opensource.apple.com/tarballs/CF/">Apple Source Browser CF-1153.18</a>。</p>
<h2 id="runloop">RunLoop</h2>
<p>RunLoop 从字面直译<strong>运行循环</strong>，摘录苹果官方的<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html">介绍</a></p>
<blockquote>
<p>Run loops are part of the fundamental infrastructure associated with threads. A run loop is an event processing loop that you use to schedule work and coordinate the receipt of incoming events. The purpose of a run loop is to keep your thread busy when there is work to do and put your thread to sleep when there is none.</p>
</blockquote>
<p>简单总结就是，RunLoop 可以让你的线程在有任务时持续工作，在空闲时可以进入休眠，并能在有任务出现时及时被唤醒。</p>
<p>如果没有 RunLoop 线程在执行完自己的任务之后就会退出，如果希望在当前任务执行完毕线程不会退出，就需要一个<strong>合理的死循环</strong>让线程常驻。这样的机制被称为 <a href="https://en.wikipedia.org/wiki/Event_loop">Event Loop</a>。这种机制并不是 Mac OSX 和 iOS 系统特有的，在绝大多数的系统框架都运用这一优良设计。</p>
<p>在 OSX 和 iOS 系统中，RunLoop 就是一个对象，两个系统的基础框架中提供两个这样的对象: NSRunLoop 和 CFRunLoopRef。</p>
<ul>
<li>CFRunLoopRef 是在 CoreFoundation 框架内的，它提供了纯 C 函数的 API，所有这些 API 都是线程安全的。</li>
<li>NSRunLoop 是基于 CFRunLoopRef 的封装，提供了面向对象的 API，但是这些 API 不是线程安全的。</li>
</ul>
<h2 id="runloop-与线程">RunLoop 与线程</h2>
<p>RunLoop 无法直接创建，但可以通过 <code>CFRunLoopGetMain()</code> 和 <code>CFRunLoopGetCurrent()</code> 来获取主线程或当前线程的 RunLoop 对象。这两个方法的内部都调用了 <code>_CFRunLoopGet0(pthread_t t)</code> 方法，传入的参数分别为 <code>pthread_main_thread_np()</code> 和 <code>pthread_self()</code>，也和 NSThread 中的 <code>[NSThread mainThread]</code> 和 <code>[NSThread currentThread]</code> 一一对应。继续看下 <code>_CFRunLoopGet0(pthread_t t)</code> 方法的内部，精简一下源码</p>
<pre><code class="language-c">static CFMutableDictionaryRef __CFRunLoops = NULL;
static CFLock_t loopsLock = CFLockInit;

CF_EXPORT CFRunLoopRef _CFRunLoopGet0(pthread_t t) {
    if (pthread_equal(t, kNilPthreadT)) { // 1. 传入的参数如果为 nil，则默认为主线程
        t = pthread_main_thread_np();
    }
    __CFLock(&amp;loopsLock);
    if (!__CFRunLoops) { // 2. 首次进入时，初始化全局的 Dict __CFRunLoops，并创建一个主线程对应的 run loop
        __CFUnlock(&amp;loopsLock);
        CFMutableDictionaryRef dict = CFDictionaryCreateMutable(kCFAllocatorSystemDefault, 0, NULL, &amp;kCFTypeDictionaryValueCallBacks);
        CFRunLoopRef mainLoop = __CFRunLoopCreate(pthread_main_thread_np());
        CFDictionarySetValue(dict, pthreadPointer(pthread_main_thread_np()), mainLoop);

        CFRelease(mainLoop);
        __CFLock(&amp;loopsLock);
    }

    // 3. 从全局的 Dict 中获取当前线程对应的 run loop
    CFRunLoopRef loop = (CFRunLoopRef)CFDictionaryGetValue(__CFRunLoops, pthreadPointer(t));
    __CFUnlock(&amp;loopsLock);
    if (!loop) {
        // 4. 如果全局 Dict 中不存在则创建新的 run loop 对象，并存储到全局 Dict 中
        CFRunLoopRef newLoop = __CFRunLoopCreate(t);
            __CFLock(&amp;loopsLock);
        loop = (CFRunLoopRef)CFDictionaryGetValue(__CFRunLoops, pthreadPointer(t));
        if (!loop) {
            CFDictionarySetValue(__CFRunLoops, pthreadPointer(t), newLoop);
            loop = newLoop;
        }
        // don't release run loops inside the loopsLock, because CFRunLoopDeallocate may end up taking it
        __CFUnlock(&amp;loopsLock);
        CFRelease(newLoop);
    }

    return loop;
}
</code></pre>
<p>RunLoop 与线程的关系是一一对应的，使用全局 Hash table <code>__CFRunLoops</code> 来保存 RunLoop 对象和线程的关系，使用线程作为 Key，RunLoop 对象本身为 Value。线程创建的时候并不会主动创建 RunLoop 对象，当我们去获取时才会创建。</p>
<h2 id="runloop-的结构">RunLoop 的结构</h2>
<p>在 CoreFoundation 的源码中，可以找到 RunLoop 的定义 <code>__CFRunLoop</code>。</p>
<pre><code class="language-c">struct __CFRunLoop {
    ...
    CFMutableSetRef _commonModes;
    CFMutableSetRef _commonModeItems;
    CFRunLoopModeRef _currentMode; // 当前执行的 model
    CFMutableSetRef _modes; // CFRunLoopModeRef 类型的集合 Set
    ...
};
</code></pre>
<p>从结构体的定义代码中，可以看出一个 RunLoop 对象可以拥有多个 <code>CFRunLoopModeRef</code>，而当前运行的 Mode 是唯一的。继续看下 <code>CFRunLoopMode</code> 的结构</p>
<pre><code class="language-c">typedef struct __CFRunLoopMode *CFRunLoopModeRef;

struct __CFRunLoopMode {
    ...
    CFMutableSetRef _sources0;
    CFMutableSetRef _sources1;
    CFMutableArrayRef _observers;
    CFMutableArrayRef _timers;
    ...
};
</code></pre>
<p>在 <strong>CFRunLoop.h</strong> 文件并没有找到 <code>__CFRunLoopMode</code> 结构体的声明，因此只能通过 <code>CFRunLoopRef</code> 提供的一些 API 对 <code>CFRunLoopMode</code> 中的 <em>sources</em>/<em>observers</em>/<em>timers</em> 进行操作。CoreFoundation 对外暴露了 <em>__CFRunLoopSource</em>/<em>__CFRunLoopObserver</em>/<em>__CFRunLoopTimer</em> 大致可以得出 RunLoop 的结构如下。</p>
<figure data-type="image" tabindex="1"><img src="https://shiwei93.github.io/post-images/1579574413402.png" alt="RunLoop" loading="lazy"></figure>
<p>一个 RunLoop 对象可以包含多个 RunLoopMode，每个 RunLoopMode 又包含了多个 Sources/Observers/Timers。每次运行一个 RunLoop 都需要指定其中的一个 Mode，当前执行的 Mode 在 <code>__CFRunLoop</code> 结构体的 <code>CFRunLoopModeRef _currentMode;</code> 变量中。</p>
<h3 id="__cfrunloopsource">__CFRunLoopSource</h3>
<p>在 <code>__CFRunLoopMode</code> 的定义中，有两种 <code>__CFRunLoopSource</code> 的类型，<code>_sources0</code> 和 <code>_sources1</code>。</p>
<ul>
<li>Sources0 包含一个回调，但没有 mach port (mach 端口，后面会提到)，这也就限制了 Sources0 无法主动触发事件，需要先使用 <code>CFRunLoopSourceSignal(CFRunLoopSourceRef rls)</code> 将这个 source 标记为 Signaled，再手动调用 <code>CFRunLoopWakeUp(CFRunLoopRef rl)</code> 唤醒 RunLoop 执行这个 source。</li>
<li>Sources1 不仅包含了回调，另外包含了 <code>mach_port_t	(*getPort)(void *info);</code> 可用于内核和其他线程相互发送消息，接收到消息时能够主动唤醒 RunLoop 的线程。</li>
</ul>
<h3 id="__cfrunloopobserver">__CFRunLoopObserver</h3>
<p>Observer 是观察者，每个 Observer 都包含一个回调 (函数指针)</p>
<pre><code class="language-c">typedef void (*CFRunLoopObserverCallBack)(CFRunLoopObserverRef observer, CFRunLoopActivity activity, void *info);
</code></pre>
<p>当 RunLoop 的执行状态发生变化的时候，会通过回调返回执行状态</p>
<pre><code class="language-c">/* Run Loop Observer Activities */
typedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) {
    kCFRunLoopEntry = (1UL &lt;&lt; 0), // 即将进入 RunLoop
    kCFRunLoopBeforeTimers = (1UL &lt;&lt; 1), // 即将处理 Timers
    kCFRunLoopBeforeSources = (1UL &lt;&lt; 2), // 即将处理 Sources
    kCFRunLoopBeforeWaiting = (1UL &lt;&lt; 5), // 即将进入休眠
    kCFRunLoopAfterWaiting = (1UL &lt;&lt; 6), // 刚从休眠中被唤醒
    kCFRunLoopExit = (1UL &lt;&lt; 7), // 即将退出 RunLoop
};
</code></pre>
<h3 id="__cfrunlooptimer">__CFRunLoopTimer</h3>
<p>先来看一下 <strong>CFRunLoop.h</strong> 中对 <code>__CFRunLoopTimer</code> 的 typedef</p>
<pre><code class="language-c">typedef struct CF_BRIDGED_MUTABLE_TYPE(NSTimer) __CFRunLoopTimer * CFRunLoopTimerRef;
</code></pre>
<p><code>__CFRunLoopTimer</code> 和 <code>NSTimer</code> 是 <a href="https://developer.apple.com/library/archive/documentation/CoreFoundation/Conceptual/CFDesignConcepts/Articles/tollFreeBridgedTypes.html">toll-free bridged</a> 的，可以互相进行转换使用。其中包含一个时间点和一个回调，被加入 RunLoop 之后，当注册的时间点到时，RunLoop 会被唤醒以执行那个回调。</p>
<p>上述 Source/Observer/Timer 被统称为 <strong>mode item</strong>，mode 与 item 的关系为 1 对多的，但一个 item 被多次加入同一个 mode 时是无效的。</p>
<h2 id="runloop-的运行">RunLoop 的运行</h2>
<p>CoreFoundation 提供了两个运行 RunLoop 的方法</p>
<pre><code class="language-c">// 在 kCFRunLoopDefaultMode 下运行 RunLoop
void CFRunLoopRun(void) {	/* DOES CALLOUT */
    int32_t result;
    do {
        result = CFRunLoopRunSpecific(CFRunLoopGetCurrent(), kCFRunLoopDefaultMode, 1.0e10, false);
        CHECK_FOR_FORK();
    } while (kCFRunLoopRunStopped != result &amp;&amp; kCFRunLoopRunFinished != result);
}

// 在指定的 mode 下运行 RunLoop
SInt32 CFRunLoopRunInMode(CFStringRef modeName, CFTimeInterval seconds, Boolean returnAfterSourceHandled) {     /* DOES CALLOUT */
    CHECK_FOR_FORK();
    return CFRunLoopRunSpecific(CFRunLoopGetCurrent(), modeName, seconds, returnAfterSourceHandled);
}
</code></pre>
<p>摘录<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW23">官方文档</a>的介绍，RunLoop 的内部运行逻辑大致如下。</p>
<ol>
<li>Notify observers that the run loop has been entered.</li>
<li>Notify observers that any ready timers are about to fire.</li>
<li>Notify observers that any input sources that are not port based are about to fire.</li>
<li>Fire any non-port-based input sources that are ready to fire.</li>
<li>If a port-based input source is ready and waiting to fire, process the event immediately. Go to step 9.</li>
<li>Notify observers that the thread is about to sleep.</li>
<li>Put the thread to sleep until one of the following events occurs:
<ol>
<li>An event arrives for a port-based input source.</li>
<li>A timer fires.</li>
<li>The timeout value set for the run loop expires.</li>
<li>The run loop is explicitly woken up.</li>
</ol>
</li>
<li>Notify observers that the thread just woke up.</li>
<li>Process the pending event.
<ol>
<li>If a user-defined timer fired, process the timer event and restart the loop. Go to step 2.</li>
<li>If an input source fired, deliver the event.</li>
<li>If the run loop was explicitly woken up but has not yet timed out, restart the loop. Go to step 2.</li>
</ol>
</li>
<li>Notify observers that the run loop has exited.</li>
</ol>
<p>简单整理翻译下，画个流程图</p>
<figure data-type="image" tabindex="2"><img src="https://shiwei93.github.io/post-images/1579587757950.png" alt="" loading="lazy"></figure>
<p>实际执行 RunLoop 的源码行数过多，直接看容易懵逼，所以删减一些，保留一些关键步骤加上一些注释。</p>
<pre><code class="language-c">SInt32 CFRunLoopRunSpecific(CFRunLoopRef rl, CFStringRef modeName, CFTimeInterval seconds, Boolean returnAfterSourceHandled) {
    // 依据 modeName 获取 currentMode
    CFRunLoopModeRef currentMode = __CFRunLoopFindMode(rl, modeName, false);
    // currentMode 为空或 currentMode 中 sources/timers/observers 为空，直接 return
    if (NULL == currentMode || __CFRunLoopModeIsEmpty(rl, currentMode, rl-&gt;_currentMode)) {
        Boolean did = false;
        if (currentMode) __CFRunLoopModeUnlock(currentMode);
        __CFRunLoopUnlock(rl);
        return did ? kCFRunLoopRunHandledSource : kCFRunLoopRunFinished;
    }
    int32_t result = kCFRunLoopRunFinished;
	// 1. Notify observers that the run loop has been entered.
    // 通知 observer: RunLoop 即将进入
	if (currentMode-&gt;_observerMask &amp; kCFRunLoopEntry ) __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopEntry);
    // 执行 RunLoop
	result = __CFRunLoopRun(rl, currentMode, seconds, returnAfterSourceHandled, previousMode);
    return result;
    // 10. Notify observers that the run loop has exited. 
    // 通知 observer: RunLoop 即将退出 kCFRunLoopExit
	if (currentMode-&gt;_observerMask &amp; kCFRunLoopExit ) __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopExit);
    return result;
}

// 运行 RunLoop
static int32_t __CFRunLoopRun(CFRunLoopRef rl, CFRunLoopModeRef rlm, CFTimeInterval seconds, Boolean stopAfterHandle, CFRunLoopModeRef previousMode) {
    int32_t retVal = 0;
    do {
		// 2. Notify observers that any ready timers are about to fire.
        // 通知 observer: 即将执行 Timers
        __CFRunLoopDoObservers(rl, rlm, kCFRunLoopBeforeTimers);
		// 3. Notify observers that any input sources that are not port based are about to fire.
        // 通知 observer: 即将触发 Source0 回调
        __CFRunLoopDoObservers(rl, rlm, kCFRunLoopBeforeSources);
        // 执行被加入的 Blocks
        __CFRunLoopDoBlocks(rl, rlm);

		// 4. Fire any non-port-based input sources that are ready to fire.
        // RunLoop 触发 Source0 (非port) 回调。
        Boolean sourceHandledThisLoop = __CFRunLoopDoSources0(rl, rlm, stopAfterHandle);
        // 执行被加入的 Blocks
        if (sourceHandledThisLoop) {
            __CFRunLoopDoBlocks(rl, rlm);
	    }
		// 5. If a port-based input source is ready and waiting to fire, process the event immediately. Go to step 9.
        // 基于 mach_port 的事件处于 ready，立即处理 Source1，并跳转到 step 9。
        if (MACH_PORT_NULL != dispatchPort &amp;&amp; !didDispatchPortLastTime) {
            msg = (mach_msg_header_t *)msg_buffer;
            if (__CFRunLoopServiceMachPort(dispatchPort, &amp;msg, sizeof(msg_buffer), &amp;livePort, 0, &amp;voucherState, NULL)) {
                goto handle_msg;
            }
        }
		// 6. Notify observers that the thread is about to sleep.
        // 通知 observer: RunLoop 的线程即将进入休眠
        __CFRunLoopDoObservers(rl, rlm, kCFRunLoopBeforeWaiting);
		
		// 7. Put the thread to sleep until one of the following events occurs:
	    //   1. An event arrives for a port-based input source.
    	//   2. A timer fires.
	    //   3. The timeout value set for the run loop expires.
	    //   4. The run loop is explicitly woken up.
        // RunLoop 的线程进入休眠，直到下列事件中的一个事件发生时，再唤醒
        //   1. 基于 mach port 的 Source1 事件
        //   2. Timer 的时间到了
        //   3. RunLoop 超时
        //   4. 被其他方式主动唤醒
		// 
		// __CFRunLoopServiceMachPort 内部调用 mach_msg 方法，等待接收 mach_port 的消息
        __CFRunLoopServiceMachPort(waitSet, &amp;msg, sizeof(msg_buffer), &amp;livePort, poll ? 0 : TIMEOUT_INFINITY, &amp;voucherState, &amp;voucherCopy);

		// 8. Notify observers that the thread just woke up.
        // 通知 observer: RunLoop 的线程刚刚被唤醒
		__CFRunLoopDoObservers(rl, rlm, kCFRunLoopAfterWaiting);

		// 处理消息
		handle_msg;

		// 9.1 到达 timer 设定的时间，触发 timer 回调
		if (port == _timerPort) { 
			__CFRunLoopDoTimers(rl, rlm, mach_absolute_time())
		}
		// 9.2 __CFTSDKeyIsInGCDMainQ 如果 dispatch 到 GCD main_queue 的 block，执行它
		else if (port == dispatchPort) {
			__CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(msg);
		} 
		// 9.3 基于 mach_port 的 Source1 事件
		else {	
			CFRunLoopSourceRef rls = __CFRunLoopModeFindSourceForMachPort(rl, rlm, livePort);
			mach_msg_header_t *reply = NULL;
			sourceHandledThisLoop = __CFRunLoopDoSource1(rl, rlm, rls, msg, msg-&gt;msgh_size, &amp;reply) || sourceHandledThisLoop;
			if (NULL != reply) {
		    	(void)mach_msg(reply, MACH_SEND_MSG, reply-&gt;msgh_size, 0, MACH_PORT_NULL, 0, MACH_PORT_NULL);
			}
		}

        // 执行被加入的 Blocks
        __CFRunLoopDoBlocks(rl, rlm);

        if (sourceHandledThisLoop &amp;&amp; stopAfterHandle) {
            // 参数声明执行完毕就返回
	        retVal = kCFRunLoopRunHandledSource;
        } else if (timeout_context-&gt;termTSR &lt; mach_absolute_time()) {
            // 超出参数要求的超时时间
            retVal = kCFRunLoopRunTimedOut;
	    } else if (__CFRunLoopIsStopped(rl)) {
            // 外部调用强制停止
            __CFRunLoopUnsetStopped(rl);
	        retVal = kCFRunLoopRunStopped;
	    } else if (rlm-&gt;_stopped) {
            // 外部调用强制停止
	        retVal = kCFRunLoopRunStopped;
	    } else if (__CFRunLoopModeIsEmpty(rl, rlm, previousMode)) {
            // mode items 为空
	        retVal = kCFRunLoopRunFinished;
	    }
    } while (0 == retVal);
    return retVal
}
</code></pre>
<p><code>__CFRunLoopRun</code> 方法内部维护了一个 do-while 循环。线程一直停留在这个循环中，直到超时或者被手动停止，函数才会返回。</p>
<h2 id="基于-runloop-实现的功能">基于 RunLoop 实现的功能</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LeetCode Daily Question 189]]></title>
        <id>https://shiwei93.github.io/wrmxIe6Vy</id>
        <link href="https://shiwei93.github.io/wrmxIe6Vy">
        </link>
        <updated>2020-01-09T13:53:56.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目">题目</h2>
<p><a href="https://leetcode-cn.com/problems/rotate-array/">189. Rotate Array</a></p>
<h2 id="解法-1-暴力法">解法 1 暴力法</h2>
<p>每次旋转 1 个元素，总计旋转 k 次</p>
<pre><code class="language-swift">func rotate(_ nums: inout [Int], _ k: Int) {
    if k == 0 { return }
    for i in stride(from: 0, to: nums.count - 1, by: 1) {
        // 交换下标 i 与 nums.count - 1 的两个数
        nums[i] = nums[i] ^ nums[nums.count - 1]
        nums[nums.count - 1] = nums[i] ^ nums[nums.count - 1]
        nums[i] = nums[i] ^ nums[nums.count - 1]
    }
    rotate(&amp;nums, k - 1)
}
</code></pre>
<p>um... 完美的超出时间限制了<br>
<img src="https://shiwei93.github.io/post-images/1578578319385.png" alt="" loading="lazy"></p>
<h2 id="解法-2-三次反转">解法 2 三次反转</h2>
<p>对于给定的数组长度 <em>n</em> 反转次数 <em>k</em>，会有 <em>k%n</em> 个尾部元素被移动到最前面。</p>
<p>以题干中的 Example 为例，按照 <em>k=3, n=7</em> 将原数组 <code>[1,2,3,4,5,6,7]</code> 分为 <code>[1,2,3,4]</code> 和 <code>[5,6,7]</code> 两个部分。</p>
<p><strong>第一次反转</strong></p>
<p>反转第一部分得到结果 <code>[4,3,2,1,5,6,7]</code></p>
<p><strong>第二次反转</strong></p>
<p>反转第二部分得到结果 <code>[4,3,2,1,7,6,5]</code></p>
<p><strong>第三次反转</strong></p>
<p>反转全部得到答案 <code>[5,6,7,1,2,3,4]</code></p>
<pre><code class="language-swift">func rotate3Times(_ nums: inout [Int], _ k: Int) {
    var k = k
    k %= nums.count
    func reverse(_ start: Int, _ end: Int) {
        var start = start
        var end = end
        while start &lt; end {
            nums[start] = nums[start] ^ nums[end]
            nums[end] = nums[start] ^ nums[end]
            nums[start] = nums[start] ^ nums[end]
            start += 1
            end -= 1
        }
    }
    // 第一次反转
    reverse(0, nums.count - 1 - k)
    // 第二次反转
    reverse(nums.count - k, nums.count - 1)
    // 第三次反转
    reverse(0, nums.count - 1)
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[layoutSubviews 的简单小结]]></title>
        <id>https://shiwei93.github.io/1fT08jmOJ</id>
        <link href="https://shiwei93.github.io/1fT08jmOJ">
        </link>
        <updated>2020-01-09T07:23:40.000Z</updated>
        <content type="html"><![CDATA[<h2 id="layoutsubviews-何时被调用">layoutSubviews 何时被调用</h2>
<p><code>layoutSubviews</code> 在什么样的场景下会触发，一直是个困扰我的问题。Google 的结果也是众说纷纭，在总结一下查询结果，加上自己做的一些实验，得出了如下结论。</p>
<ol>
<li>调用 init <strong>[包括 init(frame:)]</strong> 时不会触发</li>
<li>调用 <code>addSubview(_:)</code> 时会触发</li>
<li><s>修改 frame 并不会触发 <code>layoutSubviews</code> 而修改 bounds, 且新值和旧值不同时会触发</s> 修改 frame 或 bounds 只要新值不等于旧值，就会触发</li>
<li>UIScrollView 滑动时，会调用 UIScrollView 的 <code>layoutSubviews</code></li>
<li>移除视图时，只有被移除视图的父视图才会触发</li>
<li>旋转设备时，只会触发 parent 视图，一般只 UIViewController 的根视图</li>
<li>修改子视图的 size，同时也会触发父视图</li>
</ol>
<h2 id="主动触发-layoutsubviews">主动触发 layoutSubviews</h2>
<p>主动触发 <code>layoutSubviews</code> UIKit 提供了两个方法 <code>setNeedsLayout()</code> 和 <code>layoutIfNeeded()</code></p>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>setNeedsLayout()</code></td>
<td style="text-align:center">将在下一个更新周期中更新布局</td>
</tr>
<tr>
<td style="text-align:center"><code>layoutIfNeeded()</code></td>
<td style="text-align:center">立即更新子视图</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LeetCode Daily Question 19]]></title>
        <id>https://shiwei93.github.io/leetcode-daily-Q-19</id>
        <link href="https://shiwei93.github.io/leetcode-daily-Q-19">
        </link>
        <updated>2020-01-07T12:54:51.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目">题目</h2>
<p><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">19. Remove Nth Node From End of List</a><br>
给定一个链表，删除链表的倒数第 <em>n</em> 个节点，<strong>只遍历一次</strong>。</p>
<h2 id="思路">思路</h2>
<h3 id="初见">初见</h3>
<p>在不考虑只遍历一次的进阶条件下，使用两个指针，第一次遍历完整个链表取到链表中总计 <em>x</em> 个元素。第二次遍历到第 <em>x - n - 1</em> 个链表元素，假设为 node，执行 <code>node.next = node.next.next</code>，得解。</p>
<h3 id="再看">再看</h3>
<p>考虑只遍历一次这个条件，同样使用两个指针，但不能在一个指针遍历完成之后，再重新遍历，那么就需要两个指针同时工作。<br>
思路如下:</p>
<ol>
<li>定义两个指针 <em>fast</em> 和 <em>sow</em></li>
<li><em>fast</em> 指针先走 <em>n</em> 个元素</li>
<li>之后当 <em>fast</em> 的 next 节点不为 <em>nil</em> 时，<em>fast</em> 和 <em>slow</em> 同时往前</li>
<li>此时 <em>slow</em> 指针指向的就是倒数第 <em>n + 1</em> 的链表元素<br>
到这里，看似只要执行 <code>slow.next = slow.next.next</code> 就可以得到正确结果，然而在跑了测试用例之后发现，<code>[1, 2] / 2</code> 和 <code>[1] / 1</code> 的输入无法通过。如果当 <em>fast</em> 先走了 <em>n</em> 步时，恰好走到了最后一个节点，此时 <em>slow</em> 节点还没有移动，则说明链表中需要移除倒数第 <em>n</em> 个节点恰好是第一个节点。实现代码如下</li>
</ol>
<pre><code class="language-swift">func removeNthFromEnd(_ head: ListNode?, _ n: Int) -&gt; ListNode? {
    var fast = head, slow: ListNode? = nil, n: Int = n
    while let nd = fast {
        if n != 0 {
            fast = nd.next
            n -= 1
            continue
        }
        fast = fast?.next
        slow = slow == nil ? head : slow?.next
    }
    if slow == nil {
        return head?.next
    } else {
        slow?.next = slow?.next?.next
        return head
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[中西文中间添加 Thin space U+2009]]></title>
        <id>https://shiwei93.github.io/thin-space</id>
        <link href="https://shiwei93.github.io/thin-space">
        </link>
        <updated>2019-06-20T02:30:29.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>在平时的文字输入时，我总会在中文和英文，中文和数字中间添加一个普通空格 (U+0020)。在文本布局时不会显得那么拥挤，也一定程度上提升了阅读体验。前一段时间即刻 App 添加了一个中西文之前默认添加一个特殊空格的特性，体验之后发现，这样的宽度短于普通空格的<strong>特殊</strong>空格，即不会出现没有空格时过于拥挤的布局，也不会出现普通空格间距过大的问题。查阅了一些资料后，找到一篇关于 <a href="http://jkorpela.fi/chars/spaces.html">Sapce 的 Unicode 表</a>，想不到空格还有这么多的种类。</p>
<p>之前的开发工作中，出现过一些，长文本在 iOS 设备中不换行的 Bug，这个问题曾经困扰了我许久，后来无意中发现了一个叫 <em>NO-BREAK SPACE</em> 的空格，其 Unicode 为 <code>U+00A0</code>。在 App 中的表现就是，设置了 UILabel 的 numberOfLines 属性为 0 同时 breakMode 设置为 byWords，含有该空格的文本也不会换行，即使限制了 UILabel 的宽度，换行时仍然会拆开单词换行。</p>
<p>鉴于即刻 App 这个新需求带来的完美效果，着手简单实现一下。不过不知道即刻选用的空格种类，这里经过多次比较之后，我使用了 <code>U+2009</code>，被称为 <em>THIN SPACE</em> 的空格。</p>
<h2 id="实现">实现</h2>
<p>这个需求，我的第一反应就是使用正则来匹配给定字符串的如下情况</p>
<ul>
<li>中文+英文</li>
<li>英文+中文</li>
<li>中文+数字</li>
<li>数字+中文</li>
<li>中文+符号</li>
<li>符号+中文</li>
<li>忽略英文和数字的组合，即计量单位，如 10TB</li>
</ul>
<p>想到用 Swift 来实现正则表达式，就会有点头皮发麻。先不说 NSRegularExpression 的部分 API 中还带有 NSRange。就是正则表达式里面，还需要添加 / 转义符，就是一个噩梦，可读性大大降低。不过，好在 Swift 5 新增的 Raw String 可以完美解决这个问题。用到的所有正则表达式如下</p>
<pre><code class="language-swift">let chinese = #&quot;[\u2E80-\u2FFF\u31C0-\u31EF\u3300-\u4DBF\u4E00-\u9FFF\uF900-\uFAFF\uFE30-\uFE4F]&quot;# // 匹配中文

// 使用 tuple
// base 基础符号。单一符号，不成对
// open 与 close 成对出现的符号
let punc = (
    base: #&quot;[@&amp;=_\,\.\?\!\$\%\^\*\-\+\/]&quot;#,
    open: #&quot;[\(\[\{\'&quot;&lt;‘“]&quot;#,
    close: #&quot;[\)\]\}\'&quot;&gt;’”]&quot;#
)

// 拉丁字符。数字、字母等
let latin = #&quot;[A-Za-z0-9\u00C0-\u00FF\u0100-\u017F\u0180-\u024F\u1E00-\u1EFF]|\#(punc.base)&quot;#
</code></pre>
<p>由于需要匹配的情况有前后之分，下面用一个数组，将上述的正则表达式组合成两个完整的正则表达式。通过 compactMap 获取到最后的 NSRegularExpression 实例数组。</p>
<pre><code class="language-swift">let patterns = [
    #&quot;(\#(chinese))(\#(latin)|\#(punc.open))&quot;#,
    #&quot;(\#(latin)|\#(punc.close))(\#(chinese))&quot;#
].compactMap { try? NSRegularExpression(pattern: $0) }
</code></pre>
<p>最后，就可以通过 <code>stringByReplacingMatches(in:options:range:withTemplate:)</code> 方法，通过 template 替换原有的字符串了。</p>
<pre><code class="language-swift">let unicode = &quot;\u{2009}&quot;
patterns.forEach { (regex) in
    result = regex.stringByReplacingMatches(in: result, options: [], range: NSMakeRange(0, result.count), withTemplate: &quot;$1\(unicode)$2&quot;)
}
return result
</code></pre>
<p>下面的 Gif 比较了不添加空格、添加普通空格和 <code>U+2009</code> 空格的区别。</p>
<figure data-type="image" tabindex="1"><img src="https://res.cloudinary.com/dxe4zc5py/image/upload/v1561000680/Blog/2019-06-20_11.16.23.gif" alt="Gif" loading="lazy"></figure>
]]></content>
    </entry>
</feed>